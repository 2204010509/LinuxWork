#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/fcntl.h>
#include<pthread.h>
#include<signal.h>

void sig_Parent(int n,siginfo_t *Info,void *arg)
{
	sleep(1);
	printf("父进程接收到数据 %d\n",Info->si_int);
	union sigval sgv;
	sgv.sival_int = ++(Info->si_int);
	sigqueue(getpid()+1,SIGUSR2,sgv);
}

void sig_Child(int n,siginfo_t *Info,void *arg)
{
	sleep(1);
	printf("子进程接收到数据 %d\n",Info->si_int);
	union sigval sgv;
	sgv.sival_int = ++(Info->si_int);
	sigqueue(getpid()-1,SIGUSR1,sgv);
}
int main(void)
{

	sigset_t set,oset;
	sigemptyset(&set);
	sigaddset(&set,SIGUSR2);
	sigprocmask(SIG_SETMASK,&set,&oset);
	pid_t pid;
	pid = fork();
	if(pid > 0)
	{

		struct sigaction nact,oact;
		nact.sa_sigaction = sig_Parent;
		nact.sa_flags = SA_SIGINFO;
		sigemptyset(&nact.sa_mask);
		sigaction(SIGUSR1,&nact,&oact);
		union sigval sgv;
		sgv.sival_int = 1;
		sigqueue(pid,SIGUSR2,sgv);
		while(1)
			sleep(1);
	}
	else if(pid == 0)
	{

		struct sigaction nact,oact;
		nact.sa_sigaction = sig_Child;
		nact.sa_flags = SA_SIGINFO;
		sigemptyset(&nact.sa_mask);
		sigaction(SIGUSR2,&nact,&oact);
		sigdelset(&set,SIGUSR2);
		sigprocmask(SIG_SETMASK,&set,&oset);
		while(1)
			sleep(1);

	}
	else
	{
		perror("call fork error");
		exit(0);
	}
	return 0;
}
